#reversing first half of the elements in linked list

class Node:
    def __init__(self,value):
        self.data=value
        self.next=None
class LinkedList():
    def add_element_at_start(self,head,value):
            new_node=Node(value)     
            new_node.next=head
            head=new_node
            return head
        
    def add_element(self,head,value):
            new_node=Node(value)     #step1
            temp=head
            while temp.next!=None:  #s2
                temp=temp.next
            temp.next=new_node     #s3
            
    def insert(self,head,value,pos):
        new_node=Node(value)
        curr=head        
        prev=None
        while pos!=0:
            prev=curr
            curr=curr.next
            pos=pos-1
        prev.next=new_node
        new_node.next=curr
        
    def remove_element(self):
        temp=head
        while(temp.next.next!=None):
            temp=temp.next
        temp.next=None

    def print_list(self,head):
        temp=head
        while(temp!=None):
            print(temp.data,end=" -> ")
            temp=temp.next
    def search_element(self,value):
        pass
    def reverse(self,head,n):
        x=head
        curr=head
        prev=None
        while(n!=0):
            temp=curr.next
            curr.next=prev
            prev=curr
            curr=temp
            n=n-1
        x.next=curr
        return prev
    
obj=LinkedList()
n=int(input("Enter the number of elements to be inserted:"))
print("enter the elements to be inserted:")
head=None
for i in range(n):
    if(i==0):
        head=Node(input())
    else:
        obj.add_element(head,input())
obj.print_list(head)
head=obj.reverse(head,n//2)
print()
obj.print_list(head)

o/p:
Enter the number of elements to be inserted:6
enter the elements to be inserted:
1
2
3
4
5
6
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 
3 -> 2 -> 1 -> 4 -> 5 -> 6 -> 

2..

#reversing second half of the elements in linked list

class Node:
    def __init__(self,value):
        self.data=value
        self.next=None
class LinkedList():
    def add_element_at_start(self,head,value):
            new_node=Node(value)     
            new_node.next=head
            head=new_node
            return head
        
    def add_element(self,head,value):
            new_node=Node(value)     #step1
            temp=head
            while temp.next!=None:  #s2
                temp=temp.next
            temp.next=new_node     #s3
            
    def insert(self,head,value,pos):
        new_node=Node(value)
        curr=head        
        prev=None
        while pos!=0:
            prev=curr
            curr=curr.next
            pos=pos-1
        prev.next=new_node
        new_node.next=curr
        
    def remove_element(self):
        temp=head
        while(temp.next.next!=None):
            temp=temp.next
        temp.next=None

    def print_list(self,head):
        temp=head
        while(temp!=None):
            print(temp.data,end=" -> ")
            temp=temp.next
    def search_element(self,value):
        pass
    def reverse(self,head,n):
        curr=head
        prev=None
        i=0
        while(i<n):
            if(i<n//2):
                x=curr
                curr=curr.next
            elif(i>=n//2):
                temp=curr.next
                curr.next=prev
                prev=curr
                curr=temp
            i+=1
        x.next=prev
        return head
    
obj=LinkedList()
n=int(input("Enter the number of elements to be inserted:"))
print("enter the elements to be inserted:")
head=None
for i in range(n):
    if(i==0):
        head=Node(input())
    else:
        obj.add_element(head,input())
obj.print_list(head)
head=obj.reverse(head,n)
print()
obj.print_list(head)

o/p:

Enter the number of elements to be inserted:6
enter the elements to be inserted:
1
2
3
4
5
6
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 
1 -> 2 -> 3 -> 6 -> 5 -> 4 -> 

3...
#DOUBLE LINKED LIST  (inserting,deleting,traversing,seraching)

class Node:
    def __init__(self,value):
        self.prev=None
        self.data=value
        self.next=None
class DoubleLinkedList():
    def add_element(self,head,value):
        new_node=Node(value)
        temp=head
        while temp.next!=None:  
            temp=temp.next
        temp.next=new_node
        new_node.prev=None
    def remove_element(self):
        temp=head
        while(temp.next.next!=None):
            temp=temp.next
        temp.next.prev=None
        temp.next=None
    def print_list(self,head):
        temp=head
        while(temp!=None):
            print(temp.data,end=" -> ")
            temp=temp.next
    def print_reverse(self,head):
        temp=head
        while(temp.next!=None):
            temp=temp.next
        while temp:
            print("<-",temp.data,end="")
            temp=temp.prev
        print()
obj=DoubleLinkedList()
head=Node(10)
obj.add_element(head,20)
obj.add_element(head,30)
obj.add_element(head,40)
obj.add_element(head,50)
obj.add_element(head,60)
obj.print_list(head)
obj.print_reverse(head)

o/p:

10 -> 20 -> 30 -> 40 -> 50 -> 60 -> <- 60


4....
# FINDING PRIME NUMBERS
            
class Node:
    def __init__(self,value):
        self.data=value
        self.next=None
class LinkedList():
    def add_element_at_start(self,head,value):
            new_node=Node(value)     
            new_node.next=head
            head=new_node
            return head
        
    def add_element(self,head,value):
            new_node=Node(value)     #step1
            temp=head
            while temp.next!=None: #s2
                temp=temp.next
            temp.next=new_node    #s3
            
    def insert(self,head,value,pos):
        new_node=Node(value)
        curr=head        
        prev=None
        while pos!=0:
            prev=curr
            curr=curr.next
            pos=pos-1
        prev.next=new_node
        new_node.next=curr
        
    def remove_element(self):
        temp=head
        while(temp.next.next!=None):
            temp=temp.next
        temp.next=None

    def print_list(self,head):
        temp=head
        while(temp!=None):
            print(temp.data,end=" -> ")
            temp=temp.next
    def search_element(self,value):
        pass
    def prime(self,head):
        temp=head
        while(temp!=None):
            count=0
            for i in range(2,(temp.data//2)+1):
                if(temp.data%i==0):
                    count+=1
                    break
            if(count==0 and temp.data!=1 and temp.data!=0):
                print(temp.data,end=",")
            temp=temp.next
obj=LinkedList()
n=int(input("Enter the number of elements to be inserted:"))
print("enter the elements to be inserted:")
head=None
for i in range(n):
    if(i==0):
        head=Node(int(input()))
    else:
        obj.add_element(head,int(input()))
obj.print_list(head)
print()
print("the prime numbers in the list are:")
obj.prime(head)

o/p:

Enter the number of elements to be inserted:5
enter the elements to be inserted:
1
2
3
4
5
1 -> 2 -> 3 -> 4 -> 5 -> 
the prime numbers in the list are:
2,3,5,

5...
#BINARY SEARCH TREE

class Node:
    
    def _init_(self,value):
        self.data = value
        self.left = None
        self.right = None

class  BSTree:
    
    def add_element(self,root,value):
        new_node = Node(value)
        if new_node.data < root.data:
            if root.left != None:
                self.add_element(root.left,value)
            else:
                root.left = new_node
        else:
            if root.right != None:
                self.add_element(root.right,value)
            else:
                root.right = new_node

    def inorder(self,root):
        if root.left != None:
            self.inorder(root.left)
        print(root.data,end=' ')
        if root.right != None:
            self.inorder(root.right)
            
    def preorder(self,root):
        print(root.data,end=' ')
        if root.left != None:
            self.preorder(root.left)
        if root.right != None:
            self.preorder(root.right)
            
    def postorder(self,root):
        if root.left != None:
            self.postorder(root.left)
        if root.right != None:
            self.postorder(root.right)
        print(root.data,end=' ')
        
    def levelorder(self,root):
        q=[]
        q.append(root)
        while len(q) != 0:
            ele = q.pop(0)
            if ele.left:
                q.append(ele.left)
            if ele.right:
                q.append(ele.right)
            print(ele.data,end=' ')
            
    def search(self,root,value):
        if root==None:
            print('element is not found')
            return
        if value<root.data:
            self.search(root,left,value)
        if value>root.data:
            self.search(root,right,value)
        if value==root.data:
            print('element is found')
            return
        
    def sum(self,root):
        sum=root.data
        if root.left!=None:
            sum+=self.sum(root,left)
        if root.right!=None:
            sum+=self.sum(root,right)
        return sum
    def height(self,root):
        if root=None:
            return -1
        left_height=self.height(root.left)
        right_height=self.height(root.right)
        return 1 +max(left_height,right_height)

root = Node(10)
obj = BSTree()
obj.add_element(root,7)
obj.add_element(root,40)
obj.add_element(root,5)
obj.add_element(root,9)
obj.add_element(root,15)
obj.add_element(root,60)

obj.inorder(root)
print()
obj.preorder(root)
print()
obj.postorder(root)
print()
obj.levelorder(root)
print()
obj.search(root,5)
obj.sum(root.left)
obj.sum(root.right)
obj.height(root)

o/p:

5 7 9 10 15 40 60
10 7 5 9 40 15 60
5 9 7 15 60 40 10
10 7 40 5 9 15 60
process finishes.5 7 9 10 15 40 60 
10 7 5 9 40 15 60